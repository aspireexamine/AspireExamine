import jsPDF from 'jspdf';
import { Result } from '@/types';

export interface PDFReportData {
  result: Result;
  studentName: string;
  paperTitle: string;
  subjectName: string;
  streamName: string;
  testDate: string;
}

export function generateTestResultPDF(data: PDFReportData): void {
  const { result, studentName, paperTitle, subjectName, streamName, testDate } = data;
  
  // Create new PDF document
  const doc = new jsPDF();
  
  // Set up colors
  const primaryColor = '#3b82f6'; // Blue
  const successColor = '#10b981'; // Green
  const errorColor = '#ef4444'; // Red
  const warningColor = '#f59e0b'; // Yellow
  const textColor = '#374151'; // Gray-700
  const lightGray = '#f3f4f6'; // Gray-100
  
  // Helper function to add text with styling
  const addText = (text: string, x: number, y: number, options: any = {}) => {
    doc.setFontSize(options.fontSize || 12);
    doc.setTextColor(options.color || textColor);
    doc.text(text, x, y);
  };
  
  // Helper function to add rectangle
  const addRect = (x: number, y: number, width: number, height: number, color: string) => {
    doc.setFillColor(color);
    doc.rect(x, y, width, height, 'F');
  };
  
  // Header
  addRect(0, 0, 210, 30, primaryColor);
  addText('TEST RESULT REPORT', 105, 20, { 
    fontSize: 18, 
    color: '#ffffff',
    align: 'center'
  });
  
  // Student Information Section
  let yPos = 45;
  addText('Student Information', 15, yPos, { fontSize: 14, color: primaryColor });
  yPos += 10;
  
  addText(`Name: ${studentName}`, 15, yPos);
  yPos += 7;
  addText(`Test Date: ${testDate}`, 15, yPos);
  yPos += 7;
  addText(`Paper: ${paperTitle}`, 15, yPos);
  yPos += 7;
  addText(`Subject: ${subjectName}`, 15, yPos);
  yPos += 7;
  addText(`Stream: ${streamName}`, 15, yPos);
  
  // Score Summary Section
  yPos += 15;
  addText('Score Summary', 15, yPos, { fontSize: 14, color: primaryColor });
  yPos += 10;
  
  // Score card background
  addRect(15, yPos - 5, 180, 35, lightGray);
  
  // Total Score
  addText('Total Score', 25, yPos + 5);
  addText(`${result.score}/${result.totalMarks}`, 25, yPos + 12, { fontSize: 16, color: primaryColor });
  
  // Percentage
  addText('Percentage', 80, yPos + 5);
  addText(`${result.percentage.toFixed(1)}%`, 80, yPos + 12, { fontSize: 16, color: primaryColor });
  
  // Grade
  const grade = getGrade(result.percentage);
  addText('Grade', 135, yPos + 5);
  addText(grade, 135, yPos + 12, { fontSize: 16, color: primaryColor });
  
  // Performance Breakdown
  yPos += 50;
  addText('Performance Breakdown', 15, yPos, { fontSize: 14, color: primaryColor });
  yPos += 10;
  
  // Performance stats
  const stats = [
    { label: 'Correct Answers', value: result.correctAnswers, color: successColor },
    { label: 'Incorrect Answers', value: result.wrongAnswers, color: errorColor },
    { label: 'Unanswered', value: result.unanswered, color: warningColor }
  ];
  
  stats.forEach((stat, index) => {
    const xPos = 15 + (index * 60);
    addRect(xPos, yPos - 5, 50, 25, lightGray);
    addText(stat.label, xPos + 5, yPos + 5, { fontSize: 10 });
    addText(stat.value.toString(), xPos + 5, yPos + 15, { fontSize: 14, color: stat.color });
  });
  
  // Time Analysis
  yPos += 40;
  addText('Time Analysis', 15, yPos, { fontSize: 14, color: primaryColor });
  yPos += 10;
  
  const timeInMinutes = Math.floor(result.timeTaken / 60);
  const timeInSeconds = result.timeTaken % 60;
  addText(`Time Taken: ${timeInMinutes}m ${timeInSeconds}s`, 15, yPos);
  
  // Performance Analysis
  yPos += 20;
  addText('Performance Analysis', 15, yPos, { fontSize: 14, color: primaryColor });
  yPos += 10;
  
  // Performance insights
  const insights = generatePerformanceInsights(result);
  insights.forEach(insight => {
    addText(`â€¢ ${insight}`, 15, yPos, { fontSize: 10 });
    yPos += 6;
  });
  
  // Footer
  const pageHeight = doc.internal.pageSize.height;
  addText('Generated by AspireExamine', 15, pageHeight - 15, { fontSize: 8, color: '#9ca3af' });
  addText(new Date().toLocaleString(), 150, pageHeight - 15, { fontSize: 8, color: '#9ca3af' });
  
  // Download the PDF
  const fileName = `Test_Result_${studentName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
}

function getGrade(percentage: number): string {
  if (percentage >= 90) return 'A+';
  if (percentage >= 80) return 'A';
  if (percentage >= 70) return 'B+';
  if (percentage >= 60) return 'B';
  if (percentage >= 50) return 'C';
  return 'F';
}

function generatePerformanceInsights(result: Result): string[] {
  const insights: string[] = [];
  
  const accuracy = (result.correctAnswers / (result.correctAnswers + result.wrongAnswers)) * 100;
  
  if (result.percentage >= 80) {
    insights.push('Excellent performance! You have a strong understanding of the subject.');
  } else if (result.percentage >= 60) {
    insights.push('Good performance! Consider reviewing areas where you made mistakes.');
  } else if (result.percentage >= 40) {
    insights.push('Average performance. Focus on strengthening your fundamentals.');
  } else {
    insights.push('Needs improvement. Consider additional study and practice.');
  }
  
  if (accuracy >= 80) {
    insights.push('High accuracy rate indicates good understanding of concepts.');
  } else if (accuracy >= 60) {
    insights.push('Moderate accuracy. Review incorrect answers to improve.');
  } else {
    insights.push('Low accuracy suggests need for more practice and study.');
  }
  
  if (result.unanswered > 0) {
    insights.push(`You left ${result.unanswered} questions unanswered. Time management could be improved.`);
  }
  
  if (result.timeTaken < 1800) { // Less than 30 minutes
    insights.push('Quick completion time shows good time management skills.');
  } else if (result.timeTaken > 3600) { // More than 1 hour
    insights.push('Consider improving time management for better efficiency.');
  }
  
  return insights;
}
